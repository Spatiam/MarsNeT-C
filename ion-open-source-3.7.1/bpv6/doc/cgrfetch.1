.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CGRFETCH 1"
.TH CGRFETCH 1 "2020-10-03" "perl v5.16.3" "BP executables"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
cgrfetch \- Visualize CGR simulations
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBcgrfetch\fR [\fI\s-1OPTIONS\s0\fR] \fIDEST-NODE\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBcgrfetch\fR uses \s-1CGR\s0 to simulate sending a bundle from the local node to
\&\fIDEST-NODE\fR. It traces the execution of \s-1CGR\s0 to generate graphs of the routes
that were considered and the routes that were ultimately chosen to forward
along. No bundle is sent during the simulation.
.PP
A \s-1JSON\s0 representation of the simulation is output to \fIOUTPUT-FILE\fR. The
representation includes parameters of the simulation and a structure for each
considered route, which in turn includes calculated parameters for the route and
an image of the contact graph.
.PP
The \fIdot\fR\|(1) tool from the Graphviz package is used to generate the contact graph
images and is required for \fIcgrfetch\fR\|(1). The \fIbase64\fR\|(1) tool from coreutils is
used to embed the images in the \s-1JSON\s0 and is also required.
.PP
Note that a trace of the route computation logic performed by \s-1CGR\s0 is printed
to stderr; there is currently no cgrfetch option for redirecting this output
to a file.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fBDEST-NODE\fR" 4
.IX Item "DEST-NODE"
The final destination to route to. To be useful, it should be a node that exists
in the contact plan.
.IP "\fB\-q\fR" 4
.IX Item "-q"
Disable trace message output.
.IP "\fB\-j\fR" 4
.IX Item "-j"
Disable \s-1JSON\s0 output.
.IP "\fB\-m\fR" 4
.IX Item "-m"
Use a minimum-latency extended \s-1COS\s0 for the bundle. This ends up sending the
bundle to all proximate nodes.
.IP "\fB\-t DISPATCH-OFFSET\fR" 4
.IX Item "-t DISPATCH-OFFSET"
Request a dispatch time of \fIDISPATCH-OFFSET\fR seconds from the time the command
is run (default: 0).
.IP "\fB\-e EXPIRATION-OFFSET\fR" 4
.IX Item "-e EXPIRATION-OFFSET"
Set the bundle expiration time to \fIEXPIRATION-OFFSET\fR seconds from the time the
command is run (default: 3600).
.IP "\fB\-s BUNDLE-SIZE\fR" 4
.IX Item "-s BUNDLE-SIZE"
Set the bundle payload size to \fIBUNDLE-SIZE\fR bytes (default: 0).
.IP "\fB\-o OUTPUT-FILE\fR" 4
.IX Item "-o OUTPUT-FILE"
Send \s-1JSON\s0 to \fIOUTPUT-FILE\fR (default: stdout).
.IP "\fB\-d \s-1PROTO:NAME\s0\fR" 4
.IX Item "-d PROTO:NAME"
Use \fI\s-1PROTO\s0\fR as the outduct protocol and \fI\s-1NAME\s0\fR as the outduct name (default:
udp:*). Use \fBlist\fR to list all available outducts.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.IP "cgrfetch 8" 4
.IX Item "cgrfetch 8"
Simulate \s-1CGR\s0 with destination node 8 and dispatch time equal to the current time.
.IP "cgrfetch 8 \-t 60" 4
.IX Item "cgrfetch 8 -t 60"
Do the same with a dispatch time 60 seconds in the future.
.IP "cgrfetch \-d list" 4
.IX Item "cgrfetch -d list"
List all available outducts.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIdot\fR\|(1), \fIbase64\fR\|(1)
