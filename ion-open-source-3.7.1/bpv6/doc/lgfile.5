.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LGFILE 5"
.TH LGFILE 5 "2020-10-03" "perl v5.16.3" "BP configuration files"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
lgfile \- ION Load/Go source file
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1ION\s0 Load/Go system enables the execution of \s-1ION\s0 administrative programs
at remote nodes:
.Sp
.RS 4
The \fBlgsend\fR program reads a Load/Go source file from a local file system,
encapsulates the text of that source file in a bundle, and sends the bundle
to a designated \s-1DTN\s0 endpoint on the remote node.
.Sp
An \fBlgagent\fR task running on the remote node, which has opened that \s-1DTN\s0
endpoint for bundle reception, receives the extracted payload of the bundle
\&\*(-- the text of the Load/Go source file \*(-- and processes it.
.RE
.PP
Load/Go source file content is limited to newline-terminated lines of \s-1ASCII\s0
characters.  More specifically, the text of any Load/Go source file is a
sequence of \fIline sets\fR of two types: \fIfile capsules\fR and \fIdirectives\fR.
Any Load/Go source file may contain any number of file capsules and any
number of directives, freely intermingled in any order, but the typical
structure of a Load/Go source file is simply a single file capsule
followed by a single directive.
.PP
Each \fIfile capsule\fR is structured as a single start-of-capsule line, followed
by zero or more capsule text lines, followed by a single end-of-capsule
line.  Each start-of-capsule line is of this form:
.Sp
.RS 4
[\fIfile_name\fR
.RE
.PP
Each capsule text line can be any line of \s-1ASCII\s0 text that does not begin
with an opening ([) or closing (]) bracket character.
.PP
A text line that begins with a closing bracket character (]) is interpreted
as an end-of-capsule line.
.PP
A \fIdirective\fR is any line of text that is not one of the lines of a file
capsule and that is of this form:
.Sp
.RS 4
!\fIdirective_text\fR
.RE
.PP
When \fBlgagent\fR identifies a file capsule, it copies all of the capsule's
text lines to a new file named \fIfile_name\fR that it creates in the current
working directory.  When \fBlgagent\fR identifies a directive, it executes
the directive by passing \fIdirective_text\fR to the \fIpseudoshell()\fR function
(see \fIplatform\fR\|(3)).  \fBlgagent\fR processes the line sets of a Load/Go source
file in the order in which they appear in the file, so the \fIdirective_text\fR
of a directive may reference a file that was created as the result of
processing a prior file capsule line set in the same source file.
.PP
Note that lgfile directives are passed to \fIpseudoshell()\fR, which on a VxWorks
platform will always spawn a new task; the first argument in \fIdirective_text\fR
must be a symbol that VxWorks can resolve to a function, not a shell
command.  Also note that the arguments in \fIdirective_text\fR will be actual
task arguments, not shell command-line arguments, so they should never be
enclosed in double-quote characters (").  However, any argument that
contains embedded whitespace must be enclosed in single-quote characters (')
so that \fIpseudoshell()\fR can parse it correctly.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Presenting the following lines of source file text to \fBlgsend\fR:
.Sp
.RS 4
[cmd33.bprc
.Sp
x protocol ltp
.Sp
]
.Sp
!bpadmin cmd33.bprc
.RE
.PP
should cause the receiving node to halt the operation of the \s-1LTP\s0
convergence-layer protocol.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIlgsend\fR\|(1), \fIlgagent\fR\|(1), \fIplatform\fR\|(3)
