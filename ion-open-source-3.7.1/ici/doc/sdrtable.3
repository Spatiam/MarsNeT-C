.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ici::doc::pod3::sdrtable 3"
.TH ici::doc::pod3::sdrtable 3 "2020-09-15" "perl v5.16.3" "ICI library functions"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
sdrtable \- Simple Data Recorder table management functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    #include "sdr.h"
\&
\&    Object  sdr_table_create        (Sdr sdr, int rowSize, int rowCount);
\&    int     sdr_table_user_data_set (Sdr sdr, Object table, Address userData);
\&    Address sdr_table_user_data     (Sdr sdr, Object table);
\&    int     sdr_table_dimensions    (Sdr sdr, Object table, int *rowSize, 
\&                                        int *rowCount);
\&    int     sdr_table_stage         (Sdr sdr, Object table);
\&    Address sdr_table_row           (Sdr sdr, Object table, 
\&                                        unsigned int rowNbr);
\&    int     sdr_table_destroy       (Sdr sdr, Object table);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1SDR\s0 table functions manage table objects in the \s-1SDR. \s0 An \s-1SDR\s0
table comprises N rows of M bytes each, plus optionally one word
of user data (which is nominally the address of some other object
in the \s-1SDR\s0's heap space).  When a table is created, the number of
rows in the table and the length of each row are specified; they remain
fixed for the life of the table.  The table functions merely
maintain information about the table structure and its location
in the \s-1SDR\s0 and calculate row addresses; other \s-1SDR\s0 functions such as
\&\fIsdr_read()\fR and \fIsdr_write()\fR are used to read and write the contents of
the table's rows.  In particular, the format of the rows of a
table is left entirely up to the user.
.IP "Object sdr_table_create(Sdr sdr, int rowSize, int rowCount)" 4
.IX Item "Object sdr_table_create(Sdr sdr, int rowSize, int rowCount)"
Creates a \*(L"self-delimited table\*(R", comprising \fIrowCount\fR rows of
\&\fIrowSize\fR bytes each, in the heap space of the indicated \s-1SDR. \s0 Note
that the content of the table, a two-dimensional array, is a single
\&\s-1SDR\s0 heap space object of size (\fIrowCount\fR x \fIrowSize\fR).  Returns
the address of the new table on success, zero on any error.
.IP "void sdr_table_user_data_set(Sdr sdr, Object table, Address userData)" 4
.IX Item "void sdr_table_user_data_set(Sdr sdr, Object table, Address userData)"
Sets the \*(L"user data\*(R" word of \fItable\fR to \fIuserData\fR.  Note that
\&\fIuserData\fR is nominally an Address but can in fact be any value
that occupies a single word.  It is typically used to point to an
\&\s-1SDR\s0 object that somehow characterizes the table as a whole, such as an
\&\s-1SDR\s0 string containing a name.
.IP "Address sdr_table_user_data(Sdr sdr, Object table)" 4
.IX Item "Address sdr_table_user_data(Sdr sdr, Object table)"
Returns the value of the \*(L"user data\*(R" word of \fItable\fR, or zero on any
error.
.IP "void sdr_table_dimensions(Sdr sdr, Object table, int *rowSize, int *rowCount)" 4
.IX Item "void sdr_table_dimensions(Sdr sdr, Object table, int *rowSize, int *rowCount)"
Reports on the row size and row count of the indicated table, as specified
when the table was created.
.IP "void sdr_table_stage(Sdr sdr, Object table)" 4
.IX Item "void sdr_table_stage(Sdr sdr, Object table)"
Stages \fItable\fR so that the array it encapsulates may be updated; see the
discussion of \fIsdr_stage()\fR in \fIsdr\fR\|(3).  The effect of this function is
the same as:
.Sp
.Vb 1
\&   sdr_stage(sdr, NULL, (Object) sdr_table_row(sdr, table, 0), 0)
.Ve
.IP "Address sdr_table_row(Sdr sdr, Object table, unsigned int rowNbr)" 4
.IX Item "Address sdr_table_row(Sdr sdr, Object table, unsigned int rowNbr)"
Returns the address of the \fIrowNbr\fRth row of \fItable\fR, for use in
reading or writing the content of this row; returns \-1 on any error.
.IP "void sdr_table_destroy(Sdr sdr, Object table)" 4
.IX Item "void sdr_table_destroy(Sdr sdr, Object table)"
Destroys \fItable\fR, releasing all bytes of all rows and destroying the
table structure itself.  \s-1DO NOT\s0 use \fIsdr_free()\fR to destroy a table, as
this would leave the table's content allocated yet unreferenced.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIsdr\fR\|(3), \fIsdrlist\fR\|(3), \fIsdrstring\fR\|(3)
